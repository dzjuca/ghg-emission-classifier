"""
=============================================================================
APLICACI√ìN STREAMLIT - CLASIFICADOR DE IMPACTO AMBIENTAL GEI
=============================================================================
Sistema de predicci√≥n del nivel de impacto ambiental de sectores industriales
basado en factores de emisi√≥n de gases de efecto invernadero (GEI)
=============================================================================
"""

import streamlit as st
import pandas as pd
import numpy as np
import pickle
import plotly.express as px
import plotly.graph_objects as go
from pathlib import Path

# =============================================================================
# CONFIGURACI√ìN DE LA P√ÅGINA
# =============================================================================

st.set_page_config(
    page_title="Clasificador GEI - Impacto Ambiental",
    page_icon="üåç",
    layout="wide",
    initial_sidebar_state="expanded"
)


# =============================================================================
# FUNCIONES AUXILIARES
# =============================================================================

@st.cache_resource
def load_model():
    """Carga el modelo entrenado y los encoders"""
    try:
        model_path = Path("modelos/best_model.pkl")
        encoders_path = Path("modelos/encoders.pkl")

        with open(model_path, 'rb') as f:
            model = pickle.load(f)

        with open(encoders_path, 'rb') as f:
            encoders = pickle.load(f)

        return model, encoders
    except Exception as e:
        st.error(f"Error al cargar el modelo: {e}")
        return None, None


@st.cache_data
def load_dataset():
    """Carga el dataset completo para consultas"""
    try:
        data_path = Path("datos/dataset_for_modeling.csv")
        df = pd.read_csv(data_path)
        return df
    except Exception as e:
        st.error(f"Error al cargar el dataset: {e}")
        return None


@st.cache_data
def load_metrics():
    """Carga las m√©tricas de comparaci√≥n de modelos"""
    try:
        metrics_path = Path("modelos/model_comparison.csv")
        df = pd.read_csv(metrics_path)
        return df
    except Exception as e:
        st.warning("No se pudieron cargar las m√©tricas del modelo")
        return None


@st.cache_data
def load_feature_importance():
    """Carga la importancia de features"""
    try:
        fi_path = Path("modelos/feature_importance.csv")
        df = pd.read_csv(fi_path)
        return df
    except Exception as e:
        st.warning("No se pudo cargar la importancia de features")
        return None


def get_class_label(class_num):
    """Convierte n√∫mero de clase a etiqueta"""
    labels = {
        0: "üü¢ Bajo",
        1: "üü° Medio-Bajo",
        2: "üü† Medio-Alto",
        3: "üî¥ Alto"
    }
    return labels.get(class_num, "Desconocido")


def get_class_description(class_num):
    """Descripci√≥n detallada de cada clase"""
    descriptions = {
        0: "Sectores con emisiones bajas (< 0.108 kg CO‚ÇÇe/$). Incluye principalmente servicios, seguros y actividades administrativas.",
        1: "Sectores con emisiones medio-bajas (0.108 - 0.173 kg CO‚ÇÇe/$). Incluye manufactura ligera y servicios especializados.",
        2: "Sectores con emisiones medio-altas (0.173 - 0.329 kg CO‚ÇÇe/$). Incluye agricultura, construcci√≥n y manufactura media.",
        3: "Sectores con emisiones altas (> 0.329 kg CO‚ÇÇe/$). Incluye industria pesada, ganader√≠a y manufactura intensiva."
    }
    return descriptions.get(class_num, "Sin descripci√≥n disponible")


# =============================================================================
# CARGA INICIAL DE DATOS
# =============================================================================

model, encoders = load_model()
df_data = load_dataset()
df_metrics = load_metrics()
df_importance = load_feature_importance()

# =============================================================================
# INTERFAZ PRINCIPAL
# =============================================================================

# T√≠tulo principal
st.title("üåç Clasificador de Impacto Ambiental - Emisiones GEI")
st.markdown("---")

# Sidebar para navegaci√≥n
st.sidebar.title("üß≠ Navegaci√≥n")
page = st.sidebar.radio(
    "Selecciona una secci√≥n:",
    ["üéØ Predicci√≥n", "üìä An√°lisis del Modelo", "üìà Exploraci√≥n de Datos", "‚ÑπÔ∏è Informaci√≥n"]
)

# =============================================================================
# P√ÅGINA 1: PREDICCI√ìN
# =============================================================================

if page == "üéØ Predicci√≥n":
    st.header("üéØ Predicci√≥n de Impacto Ambiental")

    if model is None or df_data is None:
        st.error(
            "‚ö†Ô∏è No se pudo cargar el modelo o los datos. Verifica que los archivos est√©n en las carpetas correctas.")
        st.stop()

    st.markdown("""
    Esta herramienta predice el nivel de impacto ambiental de sectores industriales 
    bas√°ndose en sus factores de emisi√≥n de gases de efecto invernadero (GEI).
    """)

    # Dos columnas para entrada de datos
    col1, col2 = st.columns([1, 1])

    with col1:
        st.subheader("üîç Selecci√≥n de Sector")

        # Opci√≥n 1: Seleccionar sector existente
        use_existing = st.radio(
            "¬øC√≥mo deseas ingresar los datos?",
            ["Seleccionar sector NAICS existente", "Ingresar valores manualmente"]
        )

        if use_existing == "Seleccionar sector NAICS existente":
            # Crear lista de opciones con c√≥digo y nombre
            sector_options = df_data[['naics_code', 'naics_title']].copy()
            sector_options['display'] = sector_options['naics_code'].astype(str) + ' - ' + sector_options['naics_title']

            selected_display = st.selectbox(
                "Selecciona un sector NAICS:",
                options=sector_options['display'].values
            )

            # Obtener el sector seleccionado
            selected_naics = int(selected_display.split(' - ')[0])
            sector_data = df_data[df_data['naics_code'] == selected_naics].iloc[0]

            # Mostrar informaci√≥n del sector
            st.info(f"**Sector seleccionado:** {sector_data['naics_title']}")
            st.info(f"**C√≥digo NAICS:** {selected_naics}")

            # Preparar features para predicci√≥n
            feature_values = {
                'co2_emission': sector_data['co2_emission'],
                'ch4_emission': sector_data['ch4_emission'],
                'n2o_emission': sector_data['n2o_emission'],
                'hfcs_emission': sector_data['hfcs_emission'],
                'pfcs_emission': sector_data['pfcs_emission'],
                'sf6_emission': sector_data['sf6_emission'],
                'nf3_emission': sector_data['nf3_emission'],
                'hfc_pfc_unspecified': sector_data['hfc_pfc_unspecified'],
                'num_gases_emitted': sector_data['num_gases_emitted'],
                'gas_diversity': sector_data['gas_diversity'],
                'sef_mef_ratio': sector_data['sef_mef_ratio'],
                'naics_2dig': sector_data['naics_2dig'],
                'dominant_gas': sector_data['dominant_gas']
            }

    with col2:
        st.subheader("üìã Caracter√≠sticas del Sector")

        if use_existing == "Seleccionar sector NAICS existente":
            # Mostrar valores en formato de tabla
            features_df = pd.DataFrame({
                'Feature': list(feature_values.keys()),
                'Valor': [f"{v:.6f}" if isinstance(v, float) else str(v) for v in feature_values.values()]
            })
            st.dataframe(features_df, use_container_width=True, hide_index=True)

        else:
            # Entrada manual de valores
            st.markdown("**Ingresa los valores de emisiones:**")

            feature_values = {}

            # Features num√©ricas principales
            col_a, col_b = st.columns(2)

            with col_a:
                feature_values['co2_emission'] = st.number_input(
                    "CO‚ÇÇ Emission", min_value=0.0, value=0.1, format="%.6f"
                )
                feature_values['ch4_emission'] = st.number_input(
                    "CH‚ÇÑ Emission", min_value=0.0, value=0.01, format="%.6f"
                )
                feature_values['n2o_emission'] = st.number_input(
                    "N‚ÇÇO Emission", min_value=0.0, value=0.001, format="%.6f"
                )
                feature_values['hfcs_emission'] = st.number_input(
                    "HFCs Emission", min_value=0.0, value=0.0001, format="%.6f"
                )
                feature_values['pfcs_emission'] = st.number_input(
                    "PFCs Emission", min_value=0.0, value=0.0001, format="%.6f"
                )
                feature_values['sf6_emission'] = st.number_input(
                    "SF‚ÇÜ Emission", min_value=0.0, value=0.0001, format="%.6f"
                )

            with col_b:
                feature_values['nf3_emission'] = st.number_input(
                    "NF‚ÇÉ Emission", min_value=0.0, value=0.0001, format="%.6f"
                )
                feature_values['hfc_pfc_unspecified'] = st.number_input(
                    "HFC/PFC Unspecified", min_value=0.0, value=0.0, format="%.6f"
                )
                feature_values['num_gases_emitted'] = st.number_input(
                    "Num Gases Emitted", min_value=0, value=5, step=1
                )
                feature_values['gas_diversity'] = st.number_input(
                    "Gas Diversity", min_value=0.0, max_value=1.0, value=0.5, format="%.6f"
                )
                feature_values['sef_mef_ratio'] = st.number_input(
                    "SEF/MEF Ratio", min_value=0.0, value=1.0, format="%.6f"
                )

                # Features categ√≥ricas
                feature_values['naics_2dig'] = st.selectbox(
                    "NAICS 2-digit code",
                    options=sorted(df_data['naics_2dig'].unique())
                )

                dominant_gas_options = sorted(df_data['dominant_gas'].unique())
                feature_values['dominant_gas'] = st.selectbox(
                    "Dominant Gas",
                    options=dominant_gas_options
                )

    # Bot√≥n de predicci√≥n
    st.markdown("---")

    if st.button("üöÄ Realizar Predicci√≥n", type="primary", use_container_width=True):
        with st.spinner("Realizando predicci√≥n..."):
            try:
                # Preparar datos para predicci√≥n
                X_pred = pd.DataFrame([feature_values])

                # Codificar solo dominant_gas (naics_2dig ya es num√©rico)
                X_pred['dominant_gas'] = encoders['dominant_gas'].transform(X_pred['dominant_gas'])

                # Orden EXACTO seg√∫n el modelo entrenado
                feature_order = [
                    'naics_2dig', 'sef_mef_ratio', 'co2_emission', 'ch4_emission',
                    'n2o_emission', 'hfcs_emission', 'pfcs_emission', 'sf6_emission',
                    'nf3_emission', 'hfc_pfc_unspecified', 'num_gases_emitted',
                    'gas_diversity', 'dominant_gas'
                ]
                X_pred = X_pred[feature_order]

                # Hacer predicci√≥n
                prediction = model.predict(X_pred)[0]
                probabilities = model.predict_proba(X_pred)[0]

                # Mostrar resultados
                st.markdown("---")
                st.subheader("üìä Resultados de la Predicci√≥n")

                # Resultado principal
                result_col1, result_col2, result_col3 = st.columns([1, 2, 1])

                with result_col2:
                    st.markdown(f"""
                    <div style='text-align: center; padding: 30px; background-color: #f0f2f6; border-radius: 10px;'>
                        <h1 style='font-size: 3em; margin: 0;'>{get_class_label(prediction)}</h1>
                        <p style='font-size: 1.2em; color: #666;'>Nivel de Impacto Ambiental</p>
                        <p style='font-size: 0.9em; color: #888; margin-top: 20px;'>{get_class_description(prediction)}</p>
                    </div>
                    """, unsafe_allow_html=True)

                # Probabilidades por clase
                st.markdown("### üìà Probabilidades por Clase")

                prob_df = pd.DataFrame({
                    'Clase': [get_class_label(i) for i in range(4)],
                    'Probabilidad': probabilities * 100
                })

                fig = px.bar(
                    prob_df,
                    x='Clase',
                    y='Probabilidad',
                    color='Probabilidad',
                    color_continuous_scale='RdYlGn_r',
                    text=prob_df['Probabilidad'].apply(lambda x: f"{x:.1f}%")
                )

                fig.update_layout(
                    height=400,
                    showlegend=False,
                    xaxis_title="",
                    yaxis_title="Probabilidad (%)",
                    yaxis_range=[0, 100]
                )

                fig.update_traces(textposition='outside')

                st.plotly_chart(fig, use_container_width=True)

                # M√©tricas adicionales
                st.markdown("### üîç An√°lisis Detallado")

                metric_col1, metric_col2, metric_col3, metric_col4 = st.columns(4)

                with metric_col1:
                    st.metric(
                        "Confianza de Predicci√≥n",
                        f"{probabilities[prediction] * 100:.1f}%",
                        delta=None
                    )

                with metric_col2:
                    st.metric(
                        "Segunda Opci√≥n",
                        get_class_label(np.argsort(probabilities)[-2]),
                        delta=f"{probabilities[np.argsort(probabilities)[-2]] * 100:.1f}%"
                    )

                with metric_col3:
                    emission_level = (feature_values['co2_emission'] +
                                      feature_values['ch4_emission'] +
                                      feature_values['n2o_emission'])
                    st.metric(
                        "Emisi√≥n Principal",
                        f"{emission_level:.4f}",
                        delta="kg CO‚ÇÇe/$"
                    )

                with metric_col4:
                    st.metric(
                        "Gas Dominante",
                        feature_values['dominant_gas'],
                        delta=None
                    )

            except Exception as e:
                st.error(f"‚ùå Error durante la predicci√≥n: {e}")

# =============================================================================
# P√ÅGINA 2: AN√ÅLISIS DEL MODELO
# =============================================================================

elif page == "üìä An√°lisis del Modelo":
    st.header("üìä An√°lisis del Modelo de Clasificaci√≥n")

    st.markdown("""
    Esta secci√≥n presenta el desempe√±o del modelo Random Forest utilizado para 
    clasificar el impacto ambiental de los sectores industriales.
    """)

    # M√©tricas del modelo
    if df_metrics is not None:
        st.subheader("üéØ Comparaci√≥n de Modelos")

        # Mostrar tabla de m√©tricas
        st.dataframe(
            df_metrics.style.highlight_max(axis=0, subset=['Accuracy', 'Precision', 'Recall', 'F1-Score']),
            use_container_width=True,
            hide_index=True
        )

        # Gr√°fico comparativo
        fig = go.Figure()

        metrics = ['Accuracy', 'Precision', 'Recall', 'F1-Score']

        for metric in metrics:
            fig.add_trace(go.Bar(
                name=metric,
                x=df_metrics['Model'],
                y=df_metrics[metric],
                text=df_metrics[metric].apply(lambda x: f"{x:.2%}"),
                textposition='outside'
            ))

        fig.update_layout(
            title="Comparaci√≥n de M√©tricas entre Modelos",
            xaxis_title="Modelo",
            yaxis_title="Score",
            barmode='group',
            height=500,
            yaxis_range=[0, 1.1]
        )

        st.plotly_chart(fig, use_container_width=True)

    # Feature Importance
    if df_importance is not None:
        st.markdown("---")
        st.subheader("üîë Importancia de Features")

        # Detectar nombres de columnas
        importance_col = 'importance' if 'importance' in df_importance.columns else 'Importance'
        feature_col = 'feature' if 'feature' in df_importance.columns else 'Feature'

        col1, col2 = st.columns([2, 1])

        with col1:
            fig = px.bar(
                df_importance.sort_values(importance_col, ascending=True).tail(10),
                x=importance_col,
                y=feature_col,
                orientation='h',
                color=importance_col,
                color_continuous_scale='Viridis',
                text=df_importance.sort_values(importance_col, ascending=True).tail(10)[importance_col].apply(
                    lambda x: f"{x:.2%}")
            )

            fig.update_layout(
                title="Top 10 Features M√°s Importantes",
                xaxis_title="Importancia",
                yaxis_title="",
                height=500,
                showlegend=False
            )

            fig.update_traces(textposition='outside')

            st.plotly_chart(fig, use_container_width=True)

        with col2:
            st.markdown("**Top 5 Features:**")
            for idx, row in df_importance.head(5).iterrows():
                st.metric(
                    row[feature_col],
                    f"{row[importance_col]:.2%}",
                    delta=None
                )

    # Informaci√≥n del modelo
    st.markdown("---")
    st.subheader("‚ÑπÔ∏è Informaci√≥n del Modelo")

    info_col1, info_col2, info_col3 = st.columns(3)

    with info_col1:
        st.info("""
        **Modelo Utilizado:**

        Random Forest Classifier

        - N√∫mero de √°rboles: 100
        - Estrategia: Bagging
        - Criterio: Gini
        """)

    with info_col2:
        st.info("""
        **Dataset:**

        - Total de sectores: 1,016
        - Training set: 762 (75%)
        - Test set: 254 (25%)
        - Features: 13
        """)

    with info_col3:
        st.info("""
        **Desempe√±o:**

        - Accuracy: 98.82%
        - F1-Score: 98.81%
        - Errores: 3/254
        - Balance: Excelente
        """)

# =============================================================================
# P√ÅGINA 3: EXPLORACI√ìN DE DATOS
# =============================================================================

elif page == "üìà Exploraci√≥n de Datos":
    st.header("üìà Exploraci√≥n de Datos")

    if df_data is None:
        st.error("‚ö†Ô∏è No se pudieron cargar los datos.")
        st.stop()

    st.markdown("Explora el dataset utilizado para entrenar el modelo de clasificaci√≥n.")

    # Filtros
    st.subheader("üîç Filtros")

    filter_col1, filter_col2 = st.columns(2)

    with filter_col1:
        selected_class = st.multiselect(
            "Filtrar por clase de impacto:",
            options=[0, 1, 2, 3],
            default=[0, 1, 2, 3],
            format_func=get_class_label
        )

    with filter_col2:
        selected_naics = st.multiselect(
            "Filtrar por sector NAICS (2 d√≠gitos):",
            options=sorted(df_data['naics_2dig'].unique()),
            default=sorted(df_data['naics_2dig'].unique())
        )

    # Aplicar filtros
    df_filtered = df_data[
        (df_data['impact_class'].isin(selected_class)) &
        (df_data['naics_2dig'].isin(selected_naics))
        ]

    # Mostrar dataset filtrado
    st.markdown(f"**Sectores mostrados:** {len(df_filtered)} de {len(df_data)}")

    st.dataframe(
        df_filtered[['naics_code', 'naics_title', 'impact_class',
                     'co2_emission', 'ch4_emission', 'n2o_emission',
                     'gas_diversity', 'dominant_gas']].head(50),
        use_container_width=True,
        hide_index=True
    )

    # Distribuciones
    st.markdown("---")
    st.subheader("üìä Distribuciones")

    chart_col1, chart_col2 = st.columns(2)

    with chart_col1:
        # Distribuci√≥n por clase
        class_dist = df_filtered['impact_class'].value_counts().sort_index()

        fig = px.pie(
            values=class_dist.values,
            names=[get_class_label(i) for i in class_dist.index],
            title="Distribuci√≥n por Clase de Impacto",
            color_discrete_sequence=px.colors.sequential.RdBu_r
        )

        st.plotly_chart(fig, use_container_width=True)

    with chart_col2:
        # Distribuci√≥n de emisiones CO2
        fig = px.histogram(
            df_filtered,
            x='co2_emission',
            nbins=50,
            title="Distribuci√≥n de Emisiones de CO‚ÇÇ",
            labels={'co2_emission': 'Emisi√≥n CO‚ÇÇ (kg CO‚ÇÇe/$)'},
            color_discrete_sequence=['#636EFA']
        )

        fig.update_layout(showlegend=False)

        st.plotly_chart(fig, use_container_width=True)

    # An√°lisis de correlaci√≥n
    st.markdown("---")
    st.subheader("üîó An√°lisis de Correlaci√≥n")

    numeric_cols = ['co2_emission', 'ch4_emission', 'n2o_emission',
                    'hfcs_emission', 'pfcs_emission', 'gas_diversity']

    corr_matrix = df_filtered[numeric_cols].corr()

    fig = px.imshow(
        corr_matrix,
        text_auto='.2f',
        aspect='auto',
        color_continuous_scale='RdBu_r',
        title="Matriz de Correlaci√≥n de Features Principales"
    )

    fig.update_layout(height=600)

    st.plotly_chart(fig, use_container_width=True)

# =============================================================================
# P√ÅGINA 4: INFORMACI√ìN
# =============================================================================

elif page == "‚ÑπÔ∏è Informaci√≥n":
    st.header("‚ÑπÔ∏è Informaci√≥n del Proyecto")

    st.markdown("""
    ## üåç Clasificador de Impacto Ambiental - Emisiones GEI

    Esta aplicaci√≥n utiliza Machine Learning para clasificar sectores industriales 
    seg√∫n su nivel de impacto ambiental bas√°ndose en factores de emisi√≥n de gases 
    de efecto invernadero (GEI).

    ### üìã Objetivo del Proyecto

    Desarrollar un sistema automatizado que permita:
    - Identificar r√°pidamente sectores de alto impacto ambiental
    - Facilitar la toma de decisiones en pol√≠ticas de mitigaci√≥n
    - Evaluar el impacto potencial de inversiones y cadenas de suministro
    - Proporcionar categorizaciones objetivas y consistentes

    ### üéØ Clases de Impacto

    Los sectores se clasifican en 4 categor√≠as:

    - **üü¢ Bajo** (0.029 - 0.108 kg CO‚ÇÇe/$): Servicios, seguros, actividades administrativas
    - **üü° Medio-Bajo** (0.108 - 0.173 kg CO‚ÇÇe/$): Manufactura ligera, servicios especializados
    - **üü† Medio-Alto** (0.173 - 0.329 kg CO‚ÇÇe/$): Agricultura, construcci√≥n, manufactura media
    - **üî¥ Alto** (> 0.329 kg CO‚ÇÇe/$): Industria pesada, ganader√≠a, manufactura intensiva

    ### üî¨ Metodolog√≠a

    **Datos utilizados:**
    - Factores de emisi√≥n GEI de la EPA v1.3.0
    - 1,016 sectores clasificados seg√∫n NAICS 2017
    - 18 tipos de gases de efecto invernadero

    **Modelos evaluados:**
    1. Logistic Regression (89.30% accuracy)
    2. K-Nearest Neighbors (88.31% accuracy)
    3. Decision Tree (98.02% accuracy)
    4. **Random Forest (98.82% accuracy)** ‚≠ê Mejor modelo

    **Features m√°s importantes:**
    1. Emisiones de CO‚ÇÇ (32.25%)
    2. Emisiones de CH‚ÇÑ (17.91%)
    3. Ratio SEF/MEF (12.09%)
    4. Emisiones de N‚ÇÇO (10.71%)

    ### üìä Desempe√±o del Modelo

    El modelo Random Forest alcanz√≥ resultados excepcionales:
    - **Accuracy:** 98.82%
    - **F1-Score:** 98.81%
    - **Errores:** Solo 3 de 254 predicciones en el test set
    - **Balance:** Excelente distribuci√≥n entre clases

    ### üõ†Ô∏è Tecnolog√≠as Utilizadas

    - **Python 3.8+**
    - **Scikit-learn** - Machine Learning
    - **Streamlit** - Interfaz web
    - **Pandas** - Manipulaci√≥n de datos
    - **Plotly** - Visualizaciones interactivas

    ### üìö Fuentes de Datos

    - **EPA Supply Chain GHG Emission Factors v1.3.0**
    - Datos de emisiones GEI de 2022
    - Potenciales de calentamiento global IPCC AR5
    - Factores expresados en d√≥lares de 2022

    ### üë®‚Äçüíª Desarrollo

    Proyecto desarrollado como parte de un an√°lisis de Machine Learning 
    para clasificaci√≥n de impacto ambiental en sectores industriales.

    ---

    ### üìß Contacto

    Para m√°s informaci√≥n sobre este proyecto, consulta la documentaci√≥n 
    o contacta al equipo de desarrollo.
    """)

    # Informaci√≥n t√©cnica adicional
    with st.expander("üîß Informaci√≥n T√©cnica Adicional"):
        st.markdown("""
        **Estructura del Dataset:**

        - `naics_code`: C√≥digo NAICS 2017 (6 d√≠gitos)
        - `naics_title`: Nombre del sector industrial
        - `co2_emission`: Emisiones de di√≥xido de carbono
        - `ch4_emission`: Emisiones de metano
        - `n2o_emission`: Emisiones de √≥xido nitroso
        - `hfcs_emission`: Emisiones de HFCs
        - `pfcs_emission`: Emisiones de PFCs
        - `sf6_emission`: Emisiones de SF‚ÇÜ
        - `nf3_emission`: Emisiones de NF‚ÇÉ
        - `hfc_pfc_unspecified`: HFC/PFC no especificados
        - `num_gases_emitted`: N√∫mero de gases emitidos
        - `gas_diversity`: Diversidad de gases emitidos
        - `sef_mef_ratio`: Ratio de factores con/sin m√°rgenes
        - `naics_2dig`: C√≥digo NAICS a 2 d√≠gitos (sector general)
        - `dominant_gas`: Gas con mayor emisi√≥n
        - `impact_class`: Clase de impacto (0-3)

        **Preprocesamiento:**

        1. Encoding de features categ√≥ricas (Label Encoding)
        2. Sin escalado para Random Forest (no lo requiere)
        3. Split estratificado 75/25 para preservar distribuci√≥n de clases
        4. Validaci√≥n cruzada para evaluaci√≥n robusta
        """)

# =============================================================================
# FOOTER
# =============================================================================

st.markdown("---")
st.markdown("""
<div style='text-align: center; color: #666; padding: 20px;'>
    <p>üåç Clasificador de Impacto Ambiental GEI | Powered by Machine Learning</p>
    <p>Datos: EPA Supply Chain GHG Emission Factors v1.3.0</p>
</div>
""", unsafe_allow_html=True)